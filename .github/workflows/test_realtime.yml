name: Test real-time constraints

# on:
#   push:
#     branches:
#       - master
on:
  push:
    branches:
      - fix/real-time-badges

jobs:

  test-realtime:
    runs-on: ubuntu-latest
    container: elixir:1.9.4-alpine

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12.1-alpine
        # Provide the password for postgres
        env:
          POSTGRES_DB: diep_io_test
          POSTGRES_HOST: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "postgres"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      MIX_ENV: "test"
      POSTGRES_DB: diep_io_test
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "postgres"

    steps:

    - uses: actions/checkout@v2

    - name: Mix local.rebar
      working-directory: ./server
      run: mix local.rebar --force
    - name: Mix local.hex
      working-directory: ./server
      run: mix local.hex --force
    - name: Mix deps.get
      working-directory: ./server
      run: mix deps.get --only test
    - name: ecto.setup
      working-directory: ./server
      run: mix ecto.setup
    - name: Test RealTime
      working-directory: ./server
      run: mix test --only RT
    - name: Upload results
      uses: actions/upload-artifact@v1
      with:
        name: badges
        path: server/badges

  generate-badges:
    needs: test-realtime
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    if: always()
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download test data
        uses: actions/download-artifact@v1
        with:
          name: badges
      - name: pip install anybadge
        run: pip install anybadge
      - name: Generate badges
        working-directory: ./server
        run: python generate-badges.py
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: badges
          path: server/badges
