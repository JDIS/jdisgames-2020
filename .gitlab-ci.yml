image: elixir:1.9.4-alpine

services:
  - postgres:12.1-alpine

variables:
  POSTGRES_DB: diep_io_test
  POSTGRES_HOST: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: "postgres"
  MIX_ENV: "test"

stages:
  - test_and_build
  - test_rt
  - generate_badges

# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
.job_template: &definition_build
  image: docker:19.03.5
  variables:
    # When using dind service we need to instruct docker, to talk with the
    # daemon started inside of the service. The daemon is available with
    # a network connection instead of the default /var/run/docker.sock socket.
    #
    # The 'docker' hostname is the alias of the service container as described at
    # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
    #
    # Note that if you're using the Kubernetes executor, the variable should be set to
    # tcp://localhost:2375 because of how the Kubernetes executor connects services
    # to the job container
    #DOCKER_HOST: tcp://localhost:2375
    #
    # For non-Kubernetes executors, we use tcp://docker:2375
    DOCKER_HOST: tcp://docker:2375
    #
    # This will instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
  services:
  - docker:19.03.5-dind
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.job_template: &definition_mix
  before_script:
    - cd server
    - mix local.rebar --force
    - mix local.hex --force
    - mix deps.get --only test
    - mix ecto.setup
  cache:
    paths:
      - server/deps
      - server/priv/plts

mix:
  <<: *definition_mix
  stage: test_and_build
  script:
    - mix quality.ci

docker:
  <<: *definition_build
  stage: test_and_build
  script:
    - cd server
    - docker pull $CI_REGISTRY_IMAGE:build_latest || true
    - docker build --target build --cache-from $CI_REGISTRY_IMAGE:build_latest --tag $CI_REGISTRY_IMAGE:build_latest .
    - docker build --cache-from $CI_REGISTRY_IMAGE:build_latest --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:build_latest
    - docker push $CI_REGISTRY_IMAGE:latest

test_rt:
  stage: test_rt
  tags:
    - RT
  only: 
    - master
  variables:
    CUSTOM_BADGES_LOCATION: $CI_PROJECT_DIR/server/badges
  before_script:
    - cd server
    - mix local.rebar --force
    - mix local.hex --force
    - mix deps.get --only test
    - mix ecto.setup
  script:
    - mix test --only RT
  cache:
    paths:
      - server/deps
      - server/priv/plts
  artifacts:
    paths:
      - server/badges
    when: always

generate_badges:
  stage: generate_badges
  image: python:3.8-alpine
  when: always
  only: 
    - master
  script:
    - pip install anybadge
    - cd server
    - python generate_badges.py
  artifacts:
    paths:
      - server/badges
    when: always
    expire_in: 4 weeks
  dependencies:
    - test_rt
